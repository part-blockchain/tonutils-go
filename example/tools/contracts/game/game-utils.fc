#include "../params.fc";

;; game_wallet
cell pack_game_wallet_data(int round_num, int bet, int multiple, slice owner_addr, slice crash_game_addr, slice jetton_minter_address, 
                           cell jetton_wallet_code, cell game_record_code) inline {
   return  begin_cell()
            .store_uint(round_num, 32)
            .store_coins(bet)
            .store_uint(multiple, 32)
            .store_slice(owner_addr)
            .store_slice(crash_game_addr)
            .store_slice(jetton_minter_address)
            .store_ref(jetton_wallet_code)
            .store_ref(game_record_code)
           .end_cell();
}


;; 说明：
;; jetton_master_address: 指定用何种币种结算
;; crash_game_addr: 指定游戏
;; jetton_wallet_code: 指定钱包代码，用于下注等token相关操作
;; game_wallet_code: 指定游戏钱包代码
cell calculate_game_wallet_state_init(slice owner_addr, slice crash_game_addr, cell game_wallet_code, 
                                      slice jetton_minter_address, cell jetton_wallet_code, cell game_record_code) inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(game_wallet_code)
          .store_dict(pack_game_wallet_data(0, 0, 0, owner_addr, crash_game_addr, jetton_minter_address, jetton_wallet_code, game_record_code))
          .store_uint(0, 1)
         .end_cell();
}

slice calculate_game_wallet_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain(), 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

slice calculate_user_game_wallet_address(slice owner_addr, slice crash_game_addr, cell game_wallet_code, 
                                         slice jetton_minter_address, cell jetton_wallet_code, cell game_record_code) inline {
  return calculate_game_wallet_address(calculate_game_wallet_state_init(owner_addr, crash_game_addr, game_wallet_code, jetton_minter_address, jetton_wallet_code, game_record_code));
}


;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;; game_record ;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

cell pack_game_record_data(int round_num, int seed, int carsh_multiple, int game_state, int player_nums, slice crash_game_addr,
                           slice jetton_minter_addr, cell jetton_wallet_code, cell game_wallet_code) inline {
   return  begin_cell()
            .store_uint(round_num, 32)
            .store_uint(seed, 32)
            .store_uint(carsh_multiple, 32)
            .store_uint(game_state, 32)
            .store_uint(player_nums, 32)
            .store_slice(crash_game_addr)
            .store_slice(jetton_minter_addr)
            .store_ref(jetton_wallet_code)
            .store_ref(game_wallet_code)
           .end_cell();
}


;; 说明：
;; crash_game_addr: 指定游戏
;; game_record_code: 指定游戏记录代码
cell calculate_game_record_state_init(int round_num, slice crash_game_addr, slice jetton_minter_addr, 
                                      cell jetton_wallet_code, cell game_record_code, cell game_wallet_code) inline {
  return begin_cell()
          .store_uint(0, 2)
          .store_dict(game_record_code)
          .store_dict(pack_game_record_data(round_num, 0, 0, 0, 0, crash_game_addr, jetton_minter_addr, jetton_wallet_code, game_wallet_code))
          .store_uint(0, 1)
         .end_cell();
}

slice calculate_game_record_address(cell state_init) inline {
  return begin_cell().store_uint(4, 3)
                     .store_int(workchain(), 8)
                     .store_uint(cell_hash(state_init), 256)
                     .end_cell()
                     .begin_parse();
}

slice calculate_user_game_record_address(int round_num, slice crash_game_addr, slice jetton_minter_addr,
                                         cell jetton_wallet_code, cell game_record_code, cell game_wallet_code) inline {
  return calculate_game_record_address(calculate_game_record_state_init(round_num, crash_game_addr, jetton_minter_addr, 
                                       jetton_wallet_code, game_record_code, game_wallet_code));
}

